def main():
  memory = [1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,10,1,19,1,19,6,23,2,13,23,27,1,27,13,31,1,9,31,35,1,35,9,39,1,39,5,43,2,6,43,47,1,47,6,51,2,51,9,55,2,55,13,59,1,59,6,63,1,10,63,67,2,67,9,71,2,6,71,75,1,75,5,79,2,79,10,83,1,5,83,87,2,9,87,91,1,5,91,95,2,13,95,99,1,99,10,103,1,103,2,107,1,107,6,0,99,2,14,0,0]
  opcodes = setState(memory, 12, 2)
  pointer = 0
  running = True
  while(running):
    instructionList = analyzeOpcode(opcodes[pointer])
    if instructionList[1]==1:
      leftValue = opcodes[pointer+1]
    else:
      leftValue = opcodes[opcodes[pointer+1]]
    if instructionList[2]==1:
      rightValue = opcodes[pointer+2]
    else:
      rightValue = opcodes[opcodes[pointer+2]]
    
    if instructionList[0]==99:
      break

    elif instructionList[0]==1 or instructionList[0]==01:
      opcodes[opcodes[pointer+3]]=leftValue + rightValue
      pointer += 4
    elif instructionList[0]==2 or instructionList[0]==02:
      opcodes[opcodes[pointer+3]] = leftValue * rightValue
      pointer += 4
    elif instructionList[0]==3:
      opcodes[pointer+1]=input
      pointer += 2
    elif instructionList[0]==4:
      print opcodes[pointer+1]
      pointer += 2

def anaylyzeOpcode(opcode):
  actionCode = opcode[-2:]
  indicatorOne = opcode[-3:-2]
  indicatorTwo = opcode[-4:-3]
  return [actionCode, indicatorOne, indicatorTwo]

def setState(memory, noun, verb):
  if(len(memory)<3):
    print "FUCK"
  result = list(memory)
  result[1] = noun
  result[2] = verb
  return result
main()
